{"version":3,"sources":["Calculator.js","component/Button.js","serviceWorker.js","index.js"],"names":["Calculator","props","calculate","symbol","state","current","previous","nextval","length","eval","String","setState","reset","addToCurrent","indexOf","push","buttons","cols","action","this","className","type","value","map","btn","i","key","Component","Button","onClick","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d384303e.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Button from './component/Button';\nimport css from './css/cal_style.css'\n\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      current: '0',\n      previous: [],\n      nextval: false\n    }\n  }\n\n  calculate = (symbol) => {\n    let {current, previous, nextval} = this.state\n    if (previous.length > 0) {\n      current = eval(String(previous[previous.length - 1] + current));\n      this.setState({current, previous: [], nextval: true})\n    }\n\n  }\n\n  reset = () => {\n    this.setState({current: '0', previous: [], nextval: false});\n  }\n\n  addToCurrent = (symbol) => {\n    //console.log(symbol);\n    if (['/', '*', '+', '-'].indexOf(symbol) > -1) {\n      let {previous} = this.state;\n      previous.push(this.state.current + symbol);\n      this.setState({previous, nextval: true});\n    }\n    else {\n      if ((this.state.current === '0' && symbol !== '.') || this.state.nextval) {\n        this.setState({current: symbol, nextval: false})\n      }\n      else {\n        this.setState({current: this.state.current + symbol})\n      }\n    }\n  }\n\n  render() {\n\n    const buttons = [\n      {symbol: 'C', cols: 3, action: this.reset},\n      {symbol: '/', cols: 1, action: this.addToCurrent},\n      {symbol: '7', cols: 1, action: this.addToCurrent},\n      {symbol: '8', cols: 1, action: this.addToCurrent},\n      {symbol: '9', cols: 1, action: this.addToCurrent},\n      {symbol: '*', cols: 1, action: this.addToCurrent},\n      {symbol: '4', cols: 1, action: this.addToCurrent},\n      {symbol: '5', cols: 1, action: this.addToCurrent},\n      {symbol: '6', cols: 1, action: this.addToCurrent},\n      {symbol: '-', cols: 1, action: this.addToCurrent},\n      {symbol: '1', cols: 1, action: this.addToCurrent},\n      {symbol: '2', cols: 1, action: this.addToCurrent},\n      {symbol: '3', cols: 1, action: this.addToCurrent},\n      {symbol: '+', cols: 1, action: this.addToCurrent},\n      {symbol: '0', cols: 2, action: this.addToCurrent},\n      {symbol: '.', cols: 1, action: this.addToCurrent},\n      {symbol: '=', cols: 1, action: this.calculate}\n    ]\n    return (\n      <div className=\"App\">\n        {this.state.previous.length > 0 ?\n          <div className=\"last\">{this.state.previous[this.state.previous.length - 1]}</div>\n          : null\n        }\n        <input className=\"Result\" type=\"text\" value={this.state.current}/>\n        <br/>\n\n        {buttons.map((btn, i) => {\n          return <Button key={i} symbol={btn.symbol} cols={btn.cols} action={(symbol) => btn.action(symbol)}/>\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Calculator;","import React, {Component} from 'react'\n\nclass Button extends Component {\n\n  render() {\n    return (\n      <div className={`column-${this.props.cols}`}>\n        <button className=\"cal-btn\" onClick={(e)=>this.props.action(this.props.symbol)}>\n          {this.props.symbol}\n        </button>\n      </div>\n    );\n  }\n}\nexport default Button;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Application from './Application';\nimport Calculator from './Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}